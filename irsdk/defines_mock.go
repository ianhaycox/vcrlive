// Code generated by MockGen. DO NOT EDIT.
// Source: defines.go
//
// Generated by this command:
//
//	mockgen -package irsdk -destination defines_mock.go -source defines.go
//

// Package irsdk is a generated GoMock package.
package irsdk

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockreader is a mock of reader interface.
type Mockreader struct {
	ctrl     *gomock.Controller
	recorder *MockreaderMockRecorder
}

// MockreaderMockRecorder is the mock recorder for Mockreader.
type MockreaderMockRecorder struct {
	mock *Mockreader
}

// NewMockreader creates a new mock instance.
func NewMockreader(ctrl *gomock.Controller) *Mockreader {
	mock := &Mockreader{ctrl: ctrl}
	mock.recorder = &MockreaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreader) EXPECT() *MockreaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockreader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockreaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockreader)(nil).Close))
}

// ReadAt mocks base method.
func (m *Mockreader) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockreaderMockRecorder) ReadAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*Mockreader)(nil).ReadAt), p, off)
}
